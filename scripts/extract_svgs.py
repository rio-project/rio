"""
This file generates a single Python file as output, which registers a new icon
set with reflex.

The file recursively scans through all files in a directory, collecting all
SVGs. The paths of the SVGs are then extracted, merged and written to the output
file.

The SVG processing is extremely simplistic. This file can be a massive help
packaging icon sets, but don't expect all icons to just magically work. You may
well have to improve this file to support all icons you're trying to process.
"""


from pathlib import Path
import reflex as rx
from xml.etree import ElementTree as ET
from typing import *  # type: ignore
from stream_tui import *  # type: ignore
import re

# Configure these values to match your icon set

SET_NAME = "bootstrap"
ICON_NAME_PATTERN = r"(.+).svg"
INPUT_DIR = rx.common.PROJECT_ROOT_DIR / "thirdparty" / "bootstrap-icons" / "icons"
OUTPUT_DIR = rx.common.PROJECT_ROOT_DIR / "bootstrap_icons.py"
LIMIT = None  # How many icons to process. Set to `None` for no limit


def name_from_icon_path(path: Path) -> Optional[str]:
    """
    Given the relative path to the icon, return a suitable name. If `None` is
    returned the file is skipped.
    """
    result = path.stem
    result = result.replace("_", "-")

    assert all(c.isalnum() or c == "-" for c in result), path

    return result


# == No changes should be required below this line ==

PYTHON_TEMPLATE = f"""
# ******************************************************************************
# *                                                                            *
# *  This file is AUTOMATICALLY GENERATED. Do not modify it, as any changes    *
# *  will be overwritten the next time the generation script is run. The       *
# *  script is called `extract_svgs.py` and can be found in the `scripts/`     *
# *  directory of `reflex`.                                                    *
# *                                                                            *
# ******************************************************************************

import reflex as rx


ICON_SET = %ICON-SET%

rx.Icon.add_icon_set({repr(SET_NAME)}, ICON_SET)

""".lstrip()


def extract_svg_canvas_size(svg_string: str) -> tuple[float, float]:
    root = ET.fromstring(svg_string)

    width = root.get("width")
    height = root.get("height")

    if width is None:
        raise ValueError("The SVG file does not have a `width` attribute")

    if height is None:
        raise ValueError("The SVG file does not have a `height` attribute")

    size_pattern = r"(\d+)(\.\d+)?"

    width = float(re.match(size_pattern, width).group(0))  # type: ignore
    height = float(re.match(size_pattern, height).group(0))  # type: ignore

    return width, height


def extract_paths_from_svg(svg_str: str) -> str:
    """
    Given a SVG file, return a set of `d` values which make up the totality of
    the file.
    """
    root = ET.fromstring(svg_str)

    # Find all paths
    all_paths = []

    for path_elem in root.findall(".//{http://www.w3.org/2000/svg}path"):
        d_attr = path_elem.get("d")
        if d_attr:
            all_paths.append(d_attr)

    # Merge them
    return " ".join(all_paths)


def main() -> None:
    # Find all files in the input directory
    print_chapter("Scanning files")

    if not INPUT_DIR.exists():
        fatal(f"The input directory [bold]{INPUT_DIR}[/bold] does not exist")

    in_files = list(INPUT_DIR.glob("**/*.svg"))
    print(f"Found {len(in_files)} file(s)")

    # Enforce an order so that the output is deterministic
    in_files.sort()

    # Apply the limit
    if LIMIT is not None:
        in_files = in_files[:LIMIT]
        print(f"Limiting to {LIMIT} file(s) (set `LIMIT` to `None` to disable)")

    # Process all files
    print_chapter("Processing files")
    icon_set: Dict[str, Tuple[float, float, str]] = {}

    with ProgressBar(max=len(in_files), unit="count") as bar:
        for ii, file_path in enumerate(in_files):
            bar.progress = ii

            # Extract the name of the icon. If this function returns `None` the
            # file is skipped.
            icon_name = name_from_icon_path(file_path.relative_to(INPUT_DIR))

            if icon_name is None:
                print(f"{file_path.name} -> [bold]skipped[/bold]")
                continue

            print(f"{file_path.name} -> {icon_name}")

            # Extract the paths
            svg_str = file_path.read_text()
            path_string = extract_paths_from_svg(svg_str)

            # Scale the paths
            width, height = extract_svg_canvas_size(svg_str)

            # Add to the icon set
            icon_set[icon_name] = (width, height, path_string)

    # Write the resulting python file
    with open(OUTPUT_DIR, "w") as f:
        full_string = PYTHON_TEMPLATE.replace("%ICON-SET%", repr(icon_set))
        f.write(full_string)

    print_chapter(None)
    print(
        f"[bold]Done![/bold] You can find the result at [bold]{OUTPUT_DIR.resolve()}[/bold]"
    )


if __name__ == "__main__":
    main()
